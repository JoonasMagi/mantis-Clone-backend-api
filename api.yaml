openapi: 3.0.0
info:
  title: Mantis Clone API
  description: A basic issue tracking system API with support for issues, labels, comments, and milestones
  version: 1.0.0
  contact:
    name: API Support
    email: support@mantisclone.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.mantisclone.com/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Issue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        description:
          type: string
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
        priority:
          type: string
          enum: [low, medium, high, critical]
        assignee:
          type: string
          format: uuid
        reporter:
          type: string
          format: uuid
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        milestone:
          $ref: '#/components/schemas/Milestone'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - title
        - status
        - priority
        - reporter

    Label:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        description:
          type: string
          maxLength: 200
      required:
        - name
        - color

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        issue_id:
          type: string
          format: uuid
        author:
          type: string
          format: uuid
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - issue_id
        - author
        - content

    Milestone:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 100
        description:
          type: string
        due_date:
          type: string
          format: date
        status:
          type: string
          enum: [open, closed]
        created_at:
          type: string
          format: date-time
      required:
        - title
        - due_date

paths:
  /issues:
    get:
      summary: List all issues
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, in_progress, resolved, closed]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: label
          in: query
          schema:
            type: string
        - name: milestone
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
    post:
      summary: Create a new issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'

  /issues/{issueId}:
    parameters:
      - name: issueId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get issue by ID
      responses:
        '200':
          description: Issue details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    put:
      summary: Update an issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issue'
      responses:
        '200':
          description: Issue updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    delete:
      summary: Delete an issue
      responses:
        '204':
          description: Issue deleted successfully

  /issues/{issueId}/comments:
    parameters:
      - name: issueId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List all comments for an issue
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Add a comment to an issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /labels:
    get:
      summary: List all labels
      responses:
        '200':
          description: List of labels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
    post:
      summary: Create a new label
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '201':
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'

  /milestones:
    get:
      summary: List all milestones
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [open, closed]
      responses:
        '200':
          description: List of milestones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Milestone'
    post:
      summary: Create a new milestone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '201':
          description: Milestone created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'

security:
  - bearerAuth: []